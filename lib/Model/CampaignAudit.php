<?php
/**
 * CampaignAudit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Marketing
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * ConnectWise Marketing API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Marketing\Spinen\ConnectWise\Clients\Marketing\Model;

use \ArrayAccess;

/**
 * CampaignAudit Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Marketing
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CampaignAudit implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CampaignAudit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'emails_sent' => 'int',
        'emails_unsent' => 'int',
        'documents_created' => 'int',
        'email_subject' => 'string',
        'group' => '\Spinen\ConnectWise\Clients\Marketing\Spinen\ConnectWise\Clients\Marketing\Model\GroupReference',
        'campaign_id' => 'int',
        'created_by' => 'string',
        'date_created' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'emails_sent' => 'emailsSent',
        'emails_unsent' => 'emailsUnsent',
        'documents_created' => 'documentsCreated',
        'email_subject' => 'emailSubject',
        'group' => 'group',
        'campaign_id' => 'campaignId',
        'created_by' => 'createdBy',
        'date_created' => 'dateCreated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'emails_sent' => 'setEmailsSent',
        'emails_unsent' => 'setEmailsUnsent',
        'documents_created' => 'setDocumentsCreated',
        'email_subject' => 'setEmailSubject',
        'group' => 'setGroup',
        'campaign_id' => 'setCampaignId',
        'created_by' => 'setCreatedBy',
        'date_created' => 'setDateCreated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'emails_sent' => 'getEmailsSent',
        'emails_unsent' => 'getEmailsUnsent',
        'documents_created' => 'getDocumentsCreated',
        'email_subject' => 'getEmailSubject',
        'group' => 'getGroup',
        'campaign_id' => 'getCampaignId',
        'created_by' => 'getCreatedBy',
        'date_created' => 'getDateCreated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['emails_sent'] = isset($data['emails_sent']) ? $data['emails_sent'] : null;
        $this->container['emails_unsent'] = isset($data['emails_unsent']) ? $data['emails_unsent'] : null;
        $this->container['documents_created'] = isset($data['documents_created']) ? $data['documents_created'] : null;
        $this->container['email_subject'] = isset($data['email_subject']) ? $data['email_subject'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['emails_sent'] === null) {
            $invalid_properties[] = "'emails_sent' can't be null";
        }
        if (($this->container['emails_sent'] > 2147483647)) {
            $invalid_properties[] = "invalid value for 'emails_sent', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['emails_sent'] < 0)) {
            $invalid_properties[] = "invalid value for 'emails_sent', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['emails_unsent']) && ($this->container['emails_unsent'] > 2147483647)) {
            $invalid_properties[] = "invalid value for 'emails_unsent', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['emails_unsent']) && ($this->container['emails_unsent'] < 0)) {
            $invalid_properties[] = "invalid value for 'emails_unsent', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['documents_created']) && ($this->container['documents_created'] > 2147483647)) {
            $invalid_properties[] = "invalid value for 'documents_created', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['documents_created']) && ($this->container['documents_created'] < 0)) {
            $invalid_properties[] = "invalid value for 'documents_created', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email_subject']) && (strlen($this->container['email_subject']) > 1000)) {
            $invalid_properties[] = "invalid value for 'email_subject', the character length must be smaller than or equal to 1000.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['emails_sent'] === null) {
            return false;
        }
        if ($this->container['emails_sent'] > 2147483647) {
            return false;
        }
        if ($this->container['emails_sent'] < 0) {
            return false;
        }
        if ($this->container['emails_unsent'] > 2147483647) {
            return false;
        }
        if ($this->container['emails_unsent'] < 0) {
            return false;
        }
        if ($this->container['documents_created'] > 2147483647) {
            return false;
        }
        if ($this->container['documents_created'] < 0) {
            return false;
        }
        if (strlen($this->container['email_subject']) > 1000) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets emails_sent
     * @return int
     */
    public function getEmailsSent()
    {
        return $this->container['emails_sent'];
    }

    /**
     * Sets emails_sent
     * @param int $emails_sent
     * @return $this
     */
    public function setEmailsSent($emails_sent)
    {

        if (($emails_sent > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $emails_sent when calling CampaignAudit., must be smaller than or equal to 2147483647.');
        }
        if (($emails_sent < 0)) {
            throw new \InvalidArgumentException('invalid value for $emails_sent when calling CampaignAudit., must be bigger than or equal to 0.');
        }

        $this->container['emails_sent'] = $emails_sent;

        return $this;
    }

    /**
     * Gets emails_unsent
     * @return int
     */
    public function getEmailsUnsent()
    {
        return $this->container['emails_unsent'];
    }

    /**
     * Sets emails_unsent
     * @param int $emails_unsent
     * @return $this
     */
    public function setEmailsUnsent($emails_unsent)
    {

        if (!is_null($emails_unsent) && ($emails_unsent > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $emails_unsent when calling CampaignAudit., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($emails_unsent) && ($emails_unsent < 0)) {
            throw new \InvalidArgumentException('invalid value for $emails_unsent when calling CampaignAudit., must be bigger than or equal to 0.');
        }

        $this->container['emails_unsent'] = $emails_unsent;

        return $this;
    }

    /**
     * Gets documents_created
     * @return int
     */
    public function getDocumentsCreated()
    {
        return $this->container['documents_created'];
    }

    /**
     * Sets documents_created
     * @param int $documents_created
     * @return $this
     */
    public function setDocumentsCreated($documents_created)
    {

        if (!is_null($documents_created) && ($documents_created > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $documents_created when calling CampaignAudit., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($documents_created) && ($documents_created < 0)) {
            throw new \InvalidArgumentException('invalid value for $documents_created when calling CampaignAudit., must be bigger than or equal to 0.');
        }

        $this->container['documents_created'] = $documents_created;

        return $this;
    }

    /**
     * Gets email_subject
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     * @param string $email_subject
     * @return $this
     */
    public function setEmailSubject($email_subject)
    {
        if (!is_null($email_subject) && (strlen($email_subject) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $email_subject when calling CampaignAudit., must be smaller than or equal to 1000.');
        }

        $this->container['email_subject'] = $email_subject;

        return $this;
    }

    /**
     * Gets group
     * @return \Spinen\ConnectWise\Clients\Marketing\Spinen\ConnectWise\Clients\Marketing\Model\GroupReference
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     * @param \Spinen\ConnectWise\Clients\Marketing\Spinen\ConnectWise\Clients\Marketing\Model\GroupReference $group
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets campaign_id
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     * @param int $campaign_id
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets created_by
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     * @param string $created_by
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets date_created
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param string $date_created
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Marketing\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Marketing\ObjectSerializer::sanitizeForSerialization($this));
    }
}


